# Little Man Computer Program to convert integer n between base a and base b

# Brief Overview of algorithm #
# 1) Take in inputs n, a, b
# 2) Get digits from n
# 3) Multiply most significant digit by a**2, second by a, third by 1
# 4) Add products together.
# 5) Take the sum and divide by b**2. Remainder then divided by b.
# 6) Take first integer division result and multiply by 100. Then take second and multiply by 10. Sum up the products and the final remainder.
# 7) Output the final sum.


# Further Detail on critical aspects
# - Branch returns:
# -- By loading current memory location and then adding 102 (to point to return point and storing this result in DAT at the end of a 'function' the program will jump back to just after where it was called allowing for 'functions' to be reused to save on lines.

# Variables names detailed at end of program.

# CODE BEGINS HERE #
	LDA	010 # Load default values for certain variables to allow for restart without recompiling
	STO	ebase
	LDA	100
	STO	divval
	STO	status

	IN # Take in n, a, b as inputs
	STO	n
	IN
	BRZ	err
	STO	a
	IN
	STO	b
	
start	LDA	a 
	STO	mulval
	STO	count
r1	LDA	r1
	BR	mul # squares sbase

r2	LDA	r2
	BR	div # divides n by ebase**2, count becomes d1

	LDA	temp
	STO	mulval # sets mulvalue to sbase**2
r3	LDA	r3
	BR	mul # d1 * base ** 2

	STO	temp2 # stores d1 * base ** 2 in temporary storage
	LDA	ebase # load non square base
	STO	divval
r4	LDA	r4
	BR	div # divide and get d2
		
	#LDA	n
	#SUB	ebase
	#BRP	err

	LDA	a
	STO	mulval
r5	LDA	r5
	BR	mul # multiply d2 * base

	ADD	temp2 # add d1 * base ** 2
	ADD	n # add d3
	STO	n

	LDA	ebase
	STO	a # Swap start and end bases
	LDA	b
	STO	ebase
	STO	count # Load mulval and count for squaring
	STO	mulval

r6	LDA	r6
	BR	mul # Square the base

	STO	divval # Pre-emptively store square of base as division value
	LDA	status # Load status variable
	SUB	100
	STO	status
	BRP	start # If status negative, branch to the end
	
	LDA	n
out	OUT # Output n
001	DAT	001 # HLT

# INT DIV /w REMAINDER #
div	ADD	102
	STO	eodiv
	LDA	000
	STO	count # Reset count
divst	LDA	n # Load running total
	SUB	divval # Subtract divval from n
	BRP	divcon # If negative then exit
eodiv	DAT	000 # Return to branch point
divcon	STO	n # Update stored n
	LDA	count 
	ADD	001 # Increment count
	STO	count
	SUB	a # Subtract base
	BRP	err # If count > base then error. Branch to err.
	BR	divst # Loop

# INT MULT #
mul	ADD	102
	STO	eomul
	LDA	000 
	STO	temp # Reset temp value
mulst	LDA	count # Load count
	BRZ	_eomul # If count is zero exit
	SUB	001 
	STO	count # Decrement count
	LDA	temp 
	ADD	mulval
	STO	temp
	SUB	mulval # Overflow handler
	BRP	overfg # If postive, overflow is not present
err	LDA	999 # Else output 999 and branch to output
	BR	out
overfg	BR	mulst # Loop
_eomul	LDA	temp # Load temp into accumulator (saves lines later)
eomul	DAT	000 # Return to branch point

# Variable list
n	DAT 		# Stores initial value, div remainder and final output
a	DAT 		# Stores starting base and later becomes a psuedo 'sbase' (to the ebase)
b	DAT 		# Stores final ending base.
divval	DAT 		# Stores value to subtract each loop during division
100	DAT	100 	# Simply stores value 100
010	DAT	010 	# Simply stores value 010
mulval	DAT		# Stores value to add each loop during multiplication
ebase	DAT		# End base, current target base to convert to.
102	DAT	102 	# Branch return point offset
000	DAT	000 	# Simply stores value 000
temp	DAT		# A temporary data location.
temp2	DAT 		# A second temporary data location. Could perhaps be replaced by n?
count	DAT 		# Integer result of division operation and also number of loops remaining during multiplication operation.
status	DAT	001 	# Stores number of master loops + 1 to run.
999	DAT	999	# Simply stores value 999 as an error code.