# By Alexander McKinney (alexander.f.mckinney@durham.ac.uk)
# Computer Systems Summative Assessment Michaelmas Term
# Little Man Computer Base Convertor

# PLAN BEGINS HERE #
# Functions required: #

# Multiply #
# Integer Divide with remainder
# Convert b10 to bX
# Convert bX to b10

# Algorithm MAIN: #
# 1) Input n, a, b
# 2) Input n, a into bX to b10
# 3) Input result, b into b10 to bX
# 4) Output result

# Algorithm MULT #
# 1) Add value to running total
# 2) Repeat until count exceeds second value
# 3) Output total

# Algorithm INT DIV W REMAIN #
# 1) Repeatedly subtract by div and increment count
# 2) Repeat until integer - div < 0
# 3) Output count

# Algorithm BT TO BX #
# 1) Int divide by base**2, base and 1
# 2) Output a*100 + b*10 + c

# Algorithm BX TO BT #
# 1) Int divide by 100, 10 and 1
# 2) Output a*base**2 + b*base + c

# Some kind of status value is needed to check where to return to
# after completing a function. Needs to store 10 jump locations 
# so therefore 3 status values are required.

# JUMP LOCATIONS

# div flags format: xt or tx, 1st or 2nd
# mult or sq format: xt or tx, sq or mult, 1st or 2nd

# xt_div1 : 00X
# xt_div2 : 01X
# xt_sq   : 000
# xt_mul1 : 011
# xt_mul2 : 010

# tx_sq   : 100
# tx_div1 : 10X
# tx_div2 : 11X
# tx_mul1 : 111
# tx_mul2 : 110

# CODE BEGINS HERE #
	IN
	STO	x # Starting Base
	IN
	STO	y # Ending Base
	IN
	STO	n # 3 Digit Value

	LDA	100
	STO	divval
	BR	div
xt_div1	LDA	count
	STO	a
	BR	div
xt_div2	LDA	count
	STO	b
	LDA	n
	STO	c

	LDA	x
	STO	count
	STO	mulval
	BR	mul
xt_sq	LDA	total
	STO	mulval
	LDA	a
	STO	count
	BR	mul
xt_mul1	LDA	total
	STO	temp
	LDA	b
	STO	count
	LDA	x
	STO	mulval
	BR	mul
xt_mul2	LDA	total
	ADD	temp
	ADD	c
	STO	n

	LDA	y
	STO	count
	STO	mulval
	BR	mul
tx_sq	LDA	total
	STO	divval
	BR	div
tx_div1	LDA	count
	STO	a
	LDA	y
	STO	divval
	BR	div
tx_div2	LDA	count
	STO	b
	LDA	n
	STO	c
	LDA	100
	STO	mulval
	LDA	a
	STO	count
	BR	mul
tx_mul1	LDA	total
	STO	temp
	LDA	b
	STO	count
	LDA	010
	STO	mulval
	BR	mul
	LDA	total
	ADD	temp
	ADD	c
	OUT	

	HLT	# End of program

# Multiply Function
mul	LDA	000
	STO	total	
	LDA	count
	BZ	endmul
	SUB	001
	STO	count
	LDA	total
	ADD	mulval
	STO	total
	B	mul
endmul	LDA	status1
	BRZ	xt_mult
	LDA	status2
	BRZ	tx_sq
	LDA	status3
	BRZ	tx_mult1
	BR	tx_mult2
xt_mult	LDA	status2
	BRZ	xt_sq
	LDA	status3
	BRZ	xt_mult1
	BR	xt_mult2


# Integer divison with remainder function
# n will be remainder, count will be int result
div	LDA	n
	SUB	divval
	BRP	divloop
	LDA	status1
	BRZ	xt_div
	LDA	status2
	BRZ	tx_div1
	BR	tx_div2
xt_div	LDA	status2
	BRZ	xt_div1
	BR	xt_div2

divloop	STO	n
	LDA	count
	ADD	001
	STO	count
	BR	div

# Work on reducing number of variables thanks.
status1	DAT	000
status2	DAT	000
status3	DAT	000
n	DAT	000
x	DAT	000
y	DAT	000
count	DAT	000
divval	DAT	000
mulval	DAT	000
total	DAT	000
000	DAT	000
001	DAT	001
010	DAT	010
100	DAT	100
a	DAT	000
b	DAT	000
c	DAT	000
